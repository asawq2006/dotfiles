#!/bin/sh
# 
# branch [branchname]
#
# Create a new local AND remote git branch
# Setup local branch to use remote tracking
#

branch=$1
if [ -z $branch ]; then
  echo "\nSwitch to or create a new branch:" 
  echo " $0 [name]"
  echo "\nCurrent branches: "
  branches="git branch -a -v"
  $branches
  echo
  exit 0
fi

# You were probably on master, but just in case...
old_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
remote=origin

local_branch_exists=$(git branch | egrep "$branch\$")
remote_branch_exists=$(git branch -r | egrep "$remote/$branch\$")

# If local exists already, switch to it
if [ -n "$local_branch_exists" ] && [ ! "$local_branch_exists" == '' ]; then
  echo "Switching to existing local branch..."
  git checkout $branch

  # Track remote branch if not already, or create remote if needed
  if [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
    tracking=$(git branch -vv | grep "*" | awk '{ print $4 '})
    # echo "Remote branch exists. Local branch is tracking: $tracking"
    if [[ ! "$tracking" =~ "$remote" ]]; then
      echo "Whoa, your local branch is not tracking a corresponding remote branch! Adding..."
      git branch --set-upstream $branch $remote/$branch
    fi
  # else
  #   echo "Remote branch does not exist, not doing anything"
  fi

# If remote exists, create local branch that tracks the remote
elif [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
  echo "* Tracking existing remote branch..."
  git checkout -b $branch --track $remote/$branch

# Otherwise create a new local branch
# We used to create a remote branche too, but you can just do that by using `push`
else
  echo "* Creating new local branch..."
  git checkout -b $branch
fi

exit 0
